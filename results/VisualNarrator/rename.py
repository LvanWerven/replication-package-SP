# This script was used to rename the output files generated by VisualNarrator
# so that they follow a consistent naming convention based on their parent folder names.

# The output files were manualy moved to folders corresponding to the input that they were generated from,
# and this script renames them as follows:
# - predictions files (.txt) are renamed to: predictions_<folder_name>.txt
# - report files (.html) are renamed to: report_<folder_name>.html
# - ontology files (.omn) are renamed to: ontology_<folder_name>.omn

import os
import pathlib
import sys

def rename_files_in_directory(root_dir):
    """
    Recursively scans through all subdirectories in the root_dir,
    and renames .txt, .html, and .omn files based on their parent folder's name.

    Args:
        root_dir (str): The path to the starting directory.
    """
    # Convert the input string to a pathlib.Path object for easier path manipulation
    root_path = pathlib.Path(root_dir)

    # Check if the root directory exists
    if not root_path.is_dir():
        print(f"‚ùå Error: The directory '{root_dir}' was not found.")
        return

    print(f"üöÄ Starting file renaming process in: {root_path.resolve()}")
    print("-" * 30)

    for dirpath, dirnames, filenames in os.walk(root_path):
        current_dir = pathlib.Path(dirpath)

        if current_dir == root_path:
            continue

        folder_name = current_dir.name.lower()
        
        renamed_in_folder = False

        print(f"üìÇ Processing folder: **{folder_name}**")

        for filename in filenames:
            file_path = current_dir / filename  # Full path to the file
            original_stem = file_path.stem      # Filename without extension
            original_suffix = file_path.suffix  # File extension (.txt, .html, etc.)

            new_filename = None

            if original_suffix == '.txt':
                new_filename = f"predictions_{folder_name}.txt"
            elif original_suffix == '.html':
                new_filename = f"report_{folder_name}.html"
            elif original_suffix == '.omn':
                new_filename = f"ontology_{folder_name}.omn"
            
            if new_filename:
                new_file_path = current_dir / new_filename
                
                if filename != new_filename:
                    try:
                        # Rename the file
                        file_path.rename(new_file_path)
                        print(f"    ‚úÖ Renamed: '{filename}' -> **'{new_filename}'**")
                        renamed_in_folder = True
                    except Exception as e:
                        print(f"    ‚ùå Error renaming '{filename}': {e}")
                else:
                    # File already has the correct name
                    print(f"    * Skipped: '{filename}' (Name already correct)")
                    
        
        if not renamed_in_folder:
            print("    * No target files found or renamed in this folder.")
        print("-" * 30)


# --- Script Execution ---

if __name__ == "__main__":
    script_directory = os.path.dirname(os.path.abspath(sys.argv[0]))
    
    rename_files_in_directory(script_directory)
    
    print("\nüéâ File renaming process complete!")